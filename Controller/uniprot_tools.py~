import urllib,urllib2

def get_AA_sequence_around_mod(residue, position, uniprotid):
    """
    Given a single uniprotid, a residue and the position of the phosphosite,
    return the amino acid sequence around the position. (from -8 to +7)
    """
    # This link returns a fasta file with the protein's sequence
    link = "http://www.uniprot.org/uniprot/" + uniprotid + ".fasta"
    f = urllib.urlopen(link)
    fasta = f.read()
    sequence = ''
    for part in fasta.split('\n')[1:]:
        sequence = sequence + part
        #print "       123456789012345678901234567890"
        #print "full: ",sequence
        #print "       123456789012345"
        #print "part: ", sequence[position-8:position+7]

    #Return sequence around phosphosite, 7 AAs before, the site, then 7AAs after
    if position < 8: # If the site is near to the start of the protein
        small_seq = sequence[:position+8]
        #print "Found one near start, First 15 are:", sequence[:15]
        #print "Position is", position, ":", sequence[position]
        num_dashes = 15-len(small_seq)
        return_sequence =  num_dashes*"-" + small_seq 
        #print "return sequence is:", return_sequence
    elif position > len(sequence)-7: # If it's near the end
        small_seq = sequence[position-8:]
        num_dashes = 15-len(small_seq)
        return_sequence = small_seq + num_dashes*"-"
    else: #It's in the middle
        return_sequence = sequence[position-8:position+7]
        #print "Return Sequence", return_sequence

    # Change the phosphorylation site AA to a lower case
    # to make it easier to spot
    #print return_sequence
    new_return_sequence = ""
    for ch in return_sequence:
        if ch in ['S','T','Y']:
            new_return_sequence = new_return_sequence + ch.lower()
        else:
            new_return_sequence = new_return_sequence + ch
    #return_sequence = return_sequence[:7] + return_sequence[7].lower() + \
    #                  return_sequence[8:]
    #print return_sequence
    return new_return_sequence




def put_genenames_in_db(db_cursor, email):
    """
    Translate the protein id to genename and add it to the main database
    """
    db_cursor.execute("SELECT uniprotid, genename FROM phosphositetb;")
    results = db_cursor.fetchall()
    #print results

    uniprotids = []
    uprotid_dict = {} # A little wasteful but solves a problem cleanly
    
    for uniprotid, genename in results:
        if genename == None:
            # Where uniprot id is e.g. A0FGR8-6
            # The '-6' part will cause conversion to genename to fail
            # So catch this and sort it out here
            if uniprotid[-2] == '-':
                #print "shortened %s to %s"%(uniprotid,uniprotid[:-2])
                full_uniprotid = uniprotid
                uniprotid = uniprotid[:-2]
            elif uniprotid[-3] == '-':
                full_uniprotid = uniprotid
                uniprotid = uniprotid[:-3]
            else:
                full_uniprotid = uniprotid
            uniprotids.append(uniprotid)
            # This dict will allow conversion back to full uniprotid
            uprotid_dict[uniprotid] = full_uniprotid
           

    uprot_to_genename_dict = get_genenames_from_uniprotids(uniprotids, email)

    for uprot, genename in uprot_to_genename_dict.iteritems():
        db_cursor.execute('UPDATE phosphositetb SET genename=? where uniprotid=?',
                          [genename,uprotid_dict[uprot]])
